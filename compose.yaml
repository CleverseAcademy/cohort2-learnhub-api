# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      NODE_ENV: production
    secrets:
      - source: node-env
        target: /usr/src/app/.env
    ports:
      - 8080:8080
    # `depends_on` tells Docker Compose to start the database before your application.
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:15
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      # The `db-data` volume persists the database data between container restarts.
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  # The `db-data` volume persists the database data between container restarts.
  db-data:
secrets:
  # The `db-password` secret is used to set the database password.
  db-password:
    file: secrets/pg-password.txt
  node-env:
    file: secrets/node-env.txt
